.x = total_cases,
.f = function(v) {log(v[7]/v[1]) / 7},
.before=6,
.after = 0
),
rolling_avg = slider::slide_dbl(
.x = growth_rate,
.f = mean,
.before = 3,
.after = 3,
.align = "center"
)
)
ggplot(growth_rate, aes(x = diagnosis_date)) +
geom_line(aes(y = growth_rate), alpha = 0.8) +
geom_line(aes(y = rolling_avg), color = "red", alpha = 0.8) +
theme_bw() +
labs(x = "Diagnosis Date", y = "Seven-day Growth Rate",
title = "COVID-19 7-day Growth Rate from 1st Jun to 13th Sep (2020)") +
geom_vline(aes(xintercept = ymd("20200630")), linetype = "dashed", color = "purple") +
geom_vline(aes(xintercept = ymd("20200723")), linetype = "dashed", color = "darkblue") +
annotate("text", x = ymd("20200630"), y = Inf, label = "June 30", vjust = 1.5, color = "purple") +
annotate("text", x = ymd("20200723"), y = Inf, label = "July 23", vjust = 1.5, color = "darkblue")
# change alpha to 0.8 (more transparent)
growth_rate <- vic_cases %>%
filter(diagnosis_date %within% plot_interval) %>%
mutate(
growth_rate = slider::slide_dbl(
.x = total_cases,
.f = function(v) {log(v[7]/v[1]) / 7},
.before=6,
.after = 0
),
rolling_avg = slider::slide_dbl(
.x = growth_rate,
.f = mean,
.before = 3,
.after = 3,
.align = "center"
)
)
ggplot(growth_rate, aes(x = diagnosis_date)) +
geom_line(aes(y = growth_rate)) +
geom_line(aes(y = rolling_avg), color = "red") +
theme_bw() +
labs(x = "Diagnosis Date", y = "Seven-day Growth Rate",
title = "COVID-19 7-day Growth Rate from 1st Jun to 13th Sep (2020)") +
geom_vline(aes(xintercept = ymd("20200630")), linetype = "dashed", color = "purple") +
geom_vline(aes(xintercept = ymd("20200723")), linetype = "dashed", color = "darkblue") +
annotate("text", x = ymd("20200630"), y = Inf, label = "June 30", vjust = 1.5, color = "purple") +
annotate("text", x = ymd("20200723"), y = Inf, label = "July 23", vjust = 1.5, color = "darkblue")
# change alpha to 0.8 (more transparent)
growth_rate <- vic_cases %>%
filter(diagnosis_date %within% plot_interval) %>%
mutate(
growth_rate = slider::slide_dbl(
.x = total_cases,
.f = function(v) {log(v[7]/v[1]) / 7},
.before=6,
.after = 0
),
rolling_avg = slider::slide_dbl(
.x = growth_rate,
.f = mean,
.before = 3,
.after = 3,
.align = "center"
)
)
ggplot(growth_rate, aes(x = diagnosis_date)) +
geom_line(aes(y = growth_rate), alpha = 0.8) +
geom_line(aes(y = rolling_avg), color = "red", alpha = 0.8) +
theme_bw() +
labs(x = "Diagnosis Date", y = "Seven-day Growth Rate",
title = "COVID-19 7-day Growth Rate from 1st Jun to 13th Sep (2020)") +
geom_vline(aes(xintercept = ymd("20200630")), linetype = "dashed", color = "purple") +
geom_vline(aes(xintercept = ymd("20200723")), linetype = "dashed", color = "darkblue") +
annotate("text", x = ymd("20200630"), y = Inf, label = "June 30", vjust = 1.5, color = "purple") +
annotate("text", x = ymd("20200723"), y = Inf, label = "July 23", vjust = 1.5, color = "darkblue")
# change alpha to 0.8 (more transparent)
View(vic_cases_time)
knitr::opts_chunk$set(
echo = TRUE,
eval = TRUE,
message = FALSE,
warning = FALSE
)
library(tidyverse)
library(dplyr)
library(readr)
library(ggplot2)
library(bookdown)
library(deSolve)
vic_case_data <- read_csv(here::here("data/NCOV_cases_by_postcode_LGA.csv"))
glimpse(vic_case_data)
vic_case_codebook <- read_csv(here::here("data/data-dictionary-Goh-Alexandra.csv"))
head(vic_case_data)
vic_cases <- vic_case_data %>%
group_by(diagnosis_date) %>%
summarise(total_cases = sum(Total_case_count))
vic_cases
fitting_start_date <- lubridate::ymd("20200601")
fitting_end_date <- lubridate::ymd("20200913")
plot_interval <- lubridate::interval(fitting_start_date, fitting_end_date)
vic_cases %>%
filter(diagnosis_date %within% plot_interval) %>%
ggplot(aes(x = diagnosis_date, y = total_cases)) +
geom_col(fill = "steelblue", alpha = 0.8) +
labs(x = "Diagnosis Date", y = "Reported COVID-19 cases") +
ggtitle("Number of Daily COVID-19 Cases from 1st Jun to 13th Sep (2020)") +
geom_vline(aes(xintercept = ymd("20200630")), linetype = "dashed", color = "red") +
geom_vline(aes(xintercept = ymd("20200723")), linetype = "dashed", color = "darkblue") +
annotate("text", x = ymd("20200630"), y = Inf, label = "June 30", vjust = 1.5, color = "red") +
annotate("text", x = ymd("20200723"), y = Inf, label = "July 23", vjust = 1.5, color = "darkblue")
growth_rate <- vic_cases %>%
filter(diagnosis_date %within% plot_interval) %>%
mutate(
growth_rate = slider::slide_dbl(
.x = total_cases,
.f = function(v) {log(v[7]/v[1]) / 7},
.before=6,
.after = 0
),
rolling_avg = slider::slide_dbl(
.x = growth_rate,
.f = mean,
.before = 3,
.after = 3,
.align = "center"
)
)
ggplot(growth_rate, aes(x = diagnosis_date)) +
geom_line(aes(y = growth_rate), alpha = 0.8) +
geom_line(aes(y = rolling_avg), color = "red", alpha = 0.8) +
theme_bw() +
labs(x = "Diagnosis Date", y = "Seven-day Growth Rate",
title = "COVID-19 7-day Growth Rate from 1st Jun to 13th Sep (2020)") +
geom_vline(aes(xintercept = ymd("20200630")), linetype = "dashed", color = "purple") +
geom_vline(aes(xintercept = ymd("20200723")), linetype = "dashed", color = "darkblue") +
annotate("text", x = ymd("20200630"), y = Inf, label = "June 30", vjust = 1.5, color = "purple") +
annotate("text", x = ymd("20200723"), y = Inf, label = "July 23", vjust = 1.5, color = "darkblue")
vic_cases_time <- vic_cases %>%
filter(diagnosis_date %within% plot_interval)
logit <- function(x) {
return(log(x / (1 - x)))
}
# And its inverse
inverse.logit <- function(x) {
return(exp(x) / (1 + exp(x)))
}
N <- 6503491 # Population of Victoria (taken from ABS website as cited)
initial_infected <- 9
initial_state <- c("S" = N - initial_infected, "E" = 0, "I" = initial_infected, "R" = 0, "incidence" = 0)
COVID_withinterventions <- function(t, state, parameters) {
with(as.list(c(state, parameters)), {
N <- S + E + I + R
if (t > 29) { # after lockdowns
beta <- beta * lockdowns_efficacy
}
if (t > 52) { # after face coverings
beta <- beta * face_coverings_efficacy
}
dSdt <- -beta * S * I / N
dEdt <- beta * S * I / N - sigma * E
dIdt <- sigma * E - gamma * I
dRdt <- gamma * I
dIncidencedt <- sigma * E
return(list(
c(dSdt, dEdt, dIdt, dRdt, dIncidencedt)
))
})
}
parameters <- c(beta = 2/3,
sigma = 1/5,
gamma = 1/6,
lockdowns_efficacy = 0.1,
face_coverings_efficacy = 0.08)
solve_times <- seq(int_start(plot_interval), int_end(plot_interval), by = "1 day")
out_init <- ode(
y = initial_state,
times = as.numeric(difftime(solve_times, solve_times[1], units = "days")),
func = COVID_withinterventions,
parms = parameters
)
# Tidy model:
tidy_model <- function(ode_output, start_date) {
as_tibble(ode_output) |>
mutate(
date = as.Date(start_date + days(time)),
daily_incidence = c(0, diff(incidence))
)
}
tidy_output <- tidy_model(out_init, int_start(plot_interval))
ggplot() +
geom_col(
aes(x = diagnosis_date, y = total_cases),
width = 1, fill = "skyblue", colour = "blue",
data = vic_cases_time
) +
geom_point(
aes(x = date, y = daily_incidence),
data = tidy_output
)
# add dotted lines for interventions
negative_log_likelihood <-
function(transformed_parameters, data, state, times, func, other_parameters) {
beta <-exp(transformed_parameters["R0"]) * other_parameters["gamma"]
names(beta) <- "beta"
lockdowns_efficacy <- inverse.logit(transformed_parameters["lockdowns_efficacy"])
names(lockdowns_efficacy) <- "lockdowns_efficacy"
face_coverings_efficacy <- inverse.logit(transformed_parameters["face_coverings_efficacy"])
names(face_coverings_efficacy) <- "face_coverings_efficacy"
parameters <- c(beta, lockdowns_efficacy, face_coverings_efficacy, other_parameters)
out_ode <- ode(
y = state,
times = as.numeric(difftime(times, times[1], units = "days")),
func = func,
parms = parameters
) %>%
tidy_model(start_date = times[1])
- sum(dpois(
x = data$total_cases[-1],
lambda = out_ode$daily_incidence[-1],
log = TRUE
))
}
initial_transformed_parameters <- c("R0" = log(2), "lockdowns_efficacy" = logit(0.1),
"face_coverings_efficacy" = logit(0.08))
parameters <- c("gamma" = 1 / 6, "sigma" = 1 / 5)
optimum_mle <- optim(
par = initial_transformed_parameters,
fn = negative_log_likelihood,
data = vic_cases_time,
state = initial_state,
times = solve_times,
func = COVID_withinterventions,
other_parameters = c(parameters["gamma"], parameters["sigma"])
)
optimal_parameters_R0 <- c(
exp(optimum_mle$par["R0"]) * parameters["gamma"],
inverse.logit(optimum_mle$par["lockdowns_efficacy"]),
inverse.logit(optimum_mle$par["face_coverings_efficacy"]),
parameters["gamma"],
parameters["sigma"]
)
names(optimal_parameters_R0)[1] <- "beta"
optimal_solution <- ode(
y = initial_state,
times = as.numeric(difftime(solve_times, solve_times[1], units = "days")),
func = COVID_withinterventions,
parms = optimal_parameters_R0
) %>%
tidy_model(start_date = solve_times[1])
ggplot() +
geom_col(
aes(x = diagnosis_date, y = total_cases),
width = 1, fill = "skyblue", colour = "blue",
data = vic_cases_time
) +
geom_point(aes(x = date, y = daily_incidence),
data = optimal_solution)
# add dotted lines for interventions
optimal_parameters_R0
ggplot() +
geom_col(
aes(x = diagnosis_date, y = total_cases),
width = 1, fill = "skyblue", colour = "blue",
data = vic_cases_time
) +
geom_point(
aes(x = date, y = daily_incidence),
data = tidy_output
) +
labs(x = "Diagnosis Date", y = "Daily COVID-19 Incidences",
title = "Initial ODE Estimates") +
geom_vline(aes(xintercept = ymd("20200630")), linetype = "dashed", color = "red") +
geom_vline(aes(xintercept = ymd("20200723")), linetype = "dashed", color = "darkblue") +
annotate("text", x = ymd("20200630"), y = Inf, label = "June 30", vjust = 1.5, color = "red") +
annotate("text", x = ymd("20200723"), y = Inf, label = "July 23", vjust = 1.5, color = "darkblue")
optimal_parameters_R0 <- c(
exp(optimum_mle$par["R0"]) * parameters["gamma"],
inverse.logit(optimum_mle$par["lockdowns_efficacy"]),
inverse.logit(optimum_mle$par["face_coverings_efficacy"]),
parameters["gamma"],
parameters["sigma"]
)
names(optimal_parameters_R0)[1] <- "beta"
optimal_solution <- ode(
y = initial_state,
times = as.numeric(difftime(solve_times, solve_times[1], units = "days")),
func = COVID_withinterventions,
parms = optimal_parameters_R0
) %>%
tidy_model(start_date = solve_times[1])
ggplot() +
geom_col(
aes(x = diagnosis_date, y = total_cases),
width = 1, fill = "skyblue", colour = "blue",
data = vic_cases_time
) +
geom_point(aes(x = date, y = daily_incidence),
data = optimal_solution) +
labs(x = "Diagnosis Date", y = "Daily COVID-19 Incidences",
title = "Fitting Model with Poisson Likelihood Function") +
geom_vline(aes(xintercept = ymd("20200630")), linetype = "dashed", color = "red") +
geom_vline(aes(xintercept = ymd("20200723")), linetype = "dashed", color = "darkblue") +
annotate("text", x = ymd("20200630"), y = Inf, label = "June 30", vjust = 1.5, color = "red") +
annotate("text", x = ymd("20200723"), y = Inf, label = "July 23", vjust = 1.5, color = "darkblue")
citation("tidyverse")
citation("dplyr")
citation("readr")
citation("ggplot2")
citation("bookdown")
citation("v")
citation("deSolve")
View(vic_case_data)
knitr::opts_chunk$set(
echo = TRUE,
eval = TRUE,
message = FALSE,
warning = FALSE
)
library(tidyverse)
library(dplyr)
library(readr)
library(ggplot2)
library(bookdown)
library(deSolve)
vic_case_data <- read_csv(here::here("data/NCOV_cases_by_postcode_LGA.csv"))
glimpse(vic_case_data)
vic_case_codebook <- read_csv(here::here("data/data-dictionary-Goh-Alexandra.csv"))
head(vic_case_data)
vic_cases <- vic_case_data %>%
group_by(diagnosis_date) %>%
summarise(total_cases = sum(Total_case_count))
vic_cases
fitting_start_date <- lubridate::ymd("20200601")
fitting_end_date <- lubridate::ymd("20200913")
plot_interval <- lubridate::interval(fitting_start_date, fitting_end_date)
vic_cases %>%
filter(diagnosis_date %within% plot_interval) %>%
ggplot(aes(x = diagnosis_date, y = total_cases)) +
geom_col(fill = "steelblue", alpha = 0.8) +
labs(x = "Diagnosis Date", y = "Reported COVID-19 cases") +
ggtitle("Number of Daily COVID-19 Cases from 1st Jun to 13th Sep (2020)") +
geom_vline(aes(xintercept = ymd("20200630")), linetype = "dashed", color = "red") +
geom_vline(aes(xintercept = ymd("20200723")), linetype = "dashed", color = "darkblue") +
annotate("text", x = ymd("20200630"), y = Inf, label = "June 30", vjust = 1.5, color = "red") +
annotate("text", x = ymd("20200723"), y = Inf, label = "July 23", vjust = 1.5, color = "darkblue")
growth_rate <- vic_cases %>%
filter(diagnosis_date %within% plot_interval) %>%
mutate(
growth_rate = slider::slide_dbl(
.x = total_cases,
.f = function(v) {log(v[7]/v[1]) / 7},
.before=6,
.after = 0
),
rolling_avg = slider::slide_dbl(
.x = growth_rate,
.f = mean,
.before = 3,
.after = 3,
.align = "center"
)
)
ggplot(growth_rate, aes(x = diagnosis_date)) +
geom_line(aes(y = growth_rate), alpha = 0.8) +
geom_line(aes(y = rolling_avg), color = "red", alpha = 0.8) +
theme_bw() +
labs(x = "Diagnosis Date", y = "Seven-day Growth Rate",
title = "COVID-19 7-day Growth Rate from 1st Jun to 13th Sep (2020)") +
geom_vline(aes(xintercept = ymd("20200630")), linetype = "dashed", color = "purple") +
geom_vline(aes(xintercept = ymd("20200723")), linetype = "dashed", color = "darkblue") +
annotate("text", x = ymd("20200630"), y = Inf, label = "June 30", vjust = 1.5, color = "purple") +
annotate("text", x = ymd("20200723"), y = Inf, label = "July 23", vjust = 1.5, color = "darkblue")
vic_cases_time <- vic_cases %>%
filter(diagnosis_date %within% plot_interval)
logit <- function(x) {
return(log(x / (1 - x)))
}
# And its inverse
inverse.logit <- function(x) {
return(exp(x) / (1 + exp(x)))
}
N <- 6503491 # Population of Victoria (taken from ABS website as cited)
initial_infected <- 9
initial_state <- c("S" = N - initial_infected, "E" = 0, "I" = initial_infected, "R" = 0, "incidence" = 0)
COVID_withinterventions <- function(t, state, parameters) {
with(as.list(c(state, parameters)), {
N <- S + E + I + R
if (t > 29) { # after lockdowns
beta <- beta * lockdowns_efficacy
}
if (t > 52) { # after face coverings
beta <- beta * face_coverings_efficacy
}
dSdt <- -beta * S * I / N
dEdt <- beta * S * I / N - sigma * E
dIdt <- sigma * E - gamma * I
dRdt <- gamma * I
dIncidencedt <- sigma * E
return(list(
c(dSdt, dEdt, dIdt, dRdt, dIncidencedt)
))
})
}
parameters <- c(beta = 2/3,
sigma = 1/5,
gamma = 1/6,
lockdowns_efficacy = 0.1,
face_coverings_efficacy = 0.08)
solve_times <- seq(int_start(plot_interval), int_end(plot_interval), by = "1 day")
out_init <- ode(
y = initial_state,
times = as.numeric(difftime(solve_times, solve_times[1], units = "days")),
func = COVID_withinterventions,
parms = parameters
)
# Tidy model:
tidy_model <- function(ode_output, start_date) {
as_tibble(ode_output) |>
mutate(
date = as.Date(start_date + days(time)),
daily_incidence = c(0, diff(incidence))
)
}
tidy_output <- tidy_model(out_init, int_start(plot_interval))
ggplot() +
geom_col(
aes(x = diagnosis_date, y = total_cases),
width = 1, fill = "skyblue", colour = "blue",
data = vic_cases_time
) +
geom_point(
aes(x = date, y = daily_incidence),
data = tidy_output
) +
labs(x = "Diagnosis Date", y = "Daily COVID-19 Incidences",
title = "Initial ODE Estimates") +
geom_vline(aes(xintercept = ymd("20200630")), linetype = "dashed", color = "red") +
geom_vline(aes(xintercept = ymd("20200723")), linetype = "dashed", color = "darkblue") +
annotate("text", x = ymd("20200630"), y = Inf, label = "June 30", vjust = 1.5, color = "red") +
annotate("text", x = ymd("20200723"), y = Inf, label = "July 23", vjust = 1.5, color = "darkblue")
negative_log_likelihood <-
function(transformed_parameters, data, state, times, func, other_parameters) {
beta <-exp(transformed_parameters["R0"]) * other_parameters["gamma"]
names(beta) <- "beta"
lockdowns_efficacy <- inverse.logit(transformed_parameters["lockdowns_efficacy"])
names(lockdowns_efficacy) <- "lockdowns_efficacy"
face_coverings_efficacy <- inverse.logit(transformed_parameters["face_coverings_efficacy"])
names(face_coverings_efficacy) <- "face_coverings_efficacy"
parameters <- c(beta, lockdowns_efficacy, face_coverings_efficacy, other_parameters)
out_ode <- ode(
y = state,
times = as.numeric(difftime(times, times[1], units = "days")),
func = func,
parms = parameters
) %>%
tidy_model(start_date = times[1])
- sum(dpois(
x = data$total_cases[-1],
lambda = out_ode$daily_incidence[-1],
log = TRUE
))
}
initial_transformed_parameters <- c("R0" = log(2), "lockdowns_efficacy" = logit(0.1),
"face_coverings_efficacy" = logit(0.08))
parameters <- c("gamma" = 1 / 6, "sigma" = 1 / 5)
optimum_mle <- optim(
par = initial_transformed_parameters,
fn = negative_log_likelihood,
data = vic_cases_time,
state = initial_state,
times = solve_times,
func = COVID_withinterventions,
other_parameters = c(parameters["gamma"], parameters["sigma"])
)
optimal_parameters_R0 <- c(
exp(optimum_mle$par["R0"]) * parameters["gamma"],
inverse.logit(optimum_mle$par["lockdowns_efficacy"]),
inverse.logit(optimum_mle$par["face_coverings_efficacy"]),
parameters["gamma"],
parameters["sigma"]
)
names(optimal_parameters_R0)[1] <- "beta"
optimal_solution <- ode(
y = initial_state,
times = as.numeric(difftime(solve_times, solve_times[1], units = "days")),
func = COVID_withinterventions,
parms = optimal_parameters_R0
) %>%
tidy_model(start_date = solve_times[1])
ggplot() +
geom_col(
aes(x = diagnosis_date, y = total_cases),
width = 1, fill = "skyblue", colour = "blue",
data = vic_cases_time
) +
geom_point(aes(x = date, y = daily_incidence),
data = optimal_solution) +
labs(x = "Diagnosis Date", y = "Daily COVID-19 Incidences",
title = "Fitting Model with Poisson Likelihood Function") +
geom_vline(aes(xintercept = ymd("20200630")), linetype = "dashed", color = "red") +
geom_vline(aes(xintercept = ymd("20200723")), linetype = "dashed", color = "darkblue") +
annotate("text", x = ymd("20200630"), y = Inf, label = "June 30", vjust = 1.5, color = "red") +
annotate("text", x = ymd("20200723"), y = Inf, label = "July 23", vjust = 1.5, color = "darkblue")
optimal_parameters_R0
View(vic_case_data)
View(vic_case_codebook)
View(vic_cases_time)
View(vic_case_data)
